{
  "stats": {
    "suites": 4,
    "tests": 7,
    "passes": 7,
    "pending": 0,
    "failures": 0,
    "start": "2019-07-10T04:23:16.961Z",
    "end": "2019-07-10T04:23:20.079Z",
    "duration": 3118,
    "testsRegistered": 7,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false,
    "passPercentClass": "success",
    "pendingPercentClass": "danger"
  },
  "suites": {
    "uuid": "366df1a2-e6d5-4d63-ba77-ac34126aeff6",
    "title": "",
    "fullFile": "",
    "file": "",
    "beforeHooks": [],
    "afterHooks": [],
    "tests": [],
    "suites": [
      {
        "uuid": "d485aaa1-1793-4678-a5ea-b633c48c6836",
        "title": "GET Service API ",
        "fullFile": "/Users/nishant/Desktop/DeskTOP/Projects/reflektion_api_automation-master/test/runThis.js",
        "file": "/test/runThis.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [
          {
            "title": "verify the status code is 200 and should contain at leats 100 records ",
            "fullTitle": "GET Service API  verify the status code is 200 and should contain at leats 100 records ",
            "timedOut": false,
            "duration": 296,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "logger.info(\"GET Service API TEST Starts\")\nlet uri = \"/posts\";\nurl = baseUrl + uri;\nconsole.log(\"url is\", url)\nrequest\n    .requestPromiseQuery(url, 'GET', headers)\n    .then((response) => {\n        //console.log(response.body)\n        logger.info(\"Number of Records in GET Service API with url \", url, \"is \", response.body.length)\n        expect(response.statusCode).to.equal(200);\n        expect(response.body.length).to.be.at.least(100)\n    })\n    .then(() => done(), done)\n    .catch((error) => {\n        done(error);\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "b5113bbd-377b-4ab2-a286-c0b23229339b",
            "isHook": false,
            "skipped": false
          },
          {
            "title": " verify the response schema",
            "fullTitle": "GET Service API   verify the response schema",
            "timedOut": false,
            "duration": 210,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "let uri = \"/posts\";\nurl = baseUrl + uri;\nconsole.log(\"url is\", url)\nlogger.info(\" verify the response schema \")\nrequest\n    .requestPromiseQuery(url, 'GET', headers)\n    .then((response) => {\n        logger.info(\"status code in GET Service API with url \", url, \"is \", JSON.stringify(response.statusCode))\n        expect(response.statusCode).to.equal(200);\n        expect(response.body).to.be.an.instanceof(Object);\n        response.body.every(i => expect(i).to.have.all.keys('body', 'id', 'title', 'userId'))\n    })\n    .then(() => done(), done)\n    .catch((error) => {\n        done(error);\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "164293b7-c2e5-4ee0-af1f-c35dd51aeaec",
            "isHook": false,
            "skipped": false
          },
          {
            "title": " verify the status code is 200 and api returns only 1 record",
            "fullTitle": "GET Service API   verify the status code is 200 and api returns only 1 record",
            "timedOut": false,
            "duration": 174,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "let uri = \"/posts/1\";\nurl = baseUrl + uri;\nconsole.log(\"url is\", url)\nrequest\n    .requestPromiseQuery(url, 'GET', headers)\n    .then((response) => {\n        //to store the size of response, as it is object ,  convert it to array \n        let responseArray = [response.body]\n        logger.info(\"response in GET Service API when querying 1 record  with url \", url, \"is \", JSON.stringify(responseArray))\n        expect(response.statusCode).to.equal(200);\n        expect(responseArray.length).to.equal(1);\n        expect(response.body.id).to.equal(1)\n    })\n    .then(() => done(), done)\n    .catch((error) => {\n        done(error);\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "29b79113-e728-48a2-92a7-0591fe646f3e",
            "isHook": false,
            "skipped": false
          },
          {
            "title": " verify the status code is 404 and log the response",
            "fullTitle": "GET Service API   verify the status code is 404 and log the response",
            "timedOut": false,
            "duration": 235,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "let uri = \"/posts/invalidPost\";\nurl = baseUrl + uri;\nconsole.log(\"url is\", url)\nrequest\n    .requestQuery(url, \"GET\", headers, function (err, resp) {\n        if (err) {\n            //console.log(\"err for empty data is \", err)\n            logger.error(\"Error in GET Service API with invalid url \", url, \"is \", JSON.stringify(resp.body))\n            done();\n        } else if (!(/^2/.test('' + resp.statusCode))) { // Status Codes other than 2xx\n            //  console.log(\"status code error for empty data is \",resp, resp.statusCode)\n            logger.info(\"response in GET Service API with invalid url \", url, \"is \", JSON.stringify(resp.body)) \n            logger.info(\"status code  in GET Service API with invalid url \", url, \"is \", JSON.stringify(resp.statusCode))\n            expect(resp.statusCode).to.equal(404)\n            logger.info(\"GET SErvice API TEST ENDS\")\n            logger.info(\"********************************************************************\")\n            done();\n        }\n    })",
            "err": {},
            "isRoot": false,
            "uuid": "198eecdc-5d9a-4aa5-97df-a63db0d110c3",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [
          "b5113bbd-377b-4ab2-a286-c0b23229339b",
          "164293b7-c2e5-4ee0-af1f-c35dd51aeaec",
          "29b79113-e728-48a2-92a7-0591fe646f3e",
          "198eecdc-5d9a-4aa5-97df-a63db0d110c3"
        ],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 915,
        "root": false,
        "rootEmpty": false,
        "_timeout": 100000
      },
      {
        "uuid": "07233e6a-07f1-4212-bd63-526c8eb243e0",
        "title": "POST Service API ",
        "fullFile": "/Users/nishant/Desktop/DeskTOP/Projects/reflektion_api_automation-master/test/runThis.js",
        "file": "/test/runThis.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [
          {
            "title": "verify the status code is 201 and should able to create record ",
            "fullTitle": "POST Service API  verify the status code is 201 and should able to create record ",
            "timedOut": false,
            "duration": 762,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "logger.info(\"POST Service API TEST Starts\")\nlet uri = \"/posts\";\nurl = baseUrl + uri;\n\nrequest\n    .requestPromiseQuery(url, 'POST', headers ,data)\n    .then((response) => {\n        logger.info(\"url in post service is\", url)\n        logger.info(\"response in post service is\", JSON.stringify(response.body))\n        expect(response.statusCode).to.equal(201);\n        expect(response.body).to.be.an.instanceof(Object)\n        response.body.should.have.keys('id', 'title', 'body' , 'userId')\n        logger.info(\"POST Service API TEST ENDS\")\n        logger.info(\"********************************************************************\")\n    })\n    .then(() => done(), done)\n    .catch((error) => {\n        done(error);\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "d97febf3-8733-4400-b94b-3e6e25987ed6",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [
          "d97febf3-8733-4400-b94b-3e6e25987ed6"
        ],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 762,
        "root": false,
        "rootEmpty": false,
        "_timeout": 100000
      },
      {
        "uuid": "0ad29924-5d98-43cd-8e51-1348d84b8464",
        "title": "PUT Service API ",
        "fullFile": "/Users/nishant/Desktop/DeskTOP/Projects/reflektion_api_automation-master/test/runThis.js",
        "file": "/test/runThis.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [
          {
            "title": "verify the status code is 200 and record has been updated ",
            "fullTitle": "PUT Service API  verify the status code is 200 and record has been updated ",
            "timedOut": false,
            "duration": 718,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "logger.info(\"PUT Service API TEST Starts\")\nlet uri = \"/posts/1\";\nurl = baseUrl + uri;\n     \nrequest\n    .requestPromiseQuery(url, 'PUT', headers ,data)\n    .then((response) => {\n        logger.info(\"url in put service is\", url)\n        logger.info(\"response in put service is\", JSON.stringify(response.body))\n        expect(response.statusCode).to.equal(200);\n        expect(response.body.id).to.equal(1)\n        expect(JSON.stringify(response.body)).to.equal(JSON.stringify(data))\n        logger.info(\"PUT Service API TEST ENDS\")\n        logger.info(\"********************************************************************\")\n    })\n    .then(() => done(), done)\n    .catch((error) => {\n        done(error);\n    });",
            "err": {},
            "isRoot": false,
            "uuid": "aae97abd-d118-4844-a874-56e0396ef98c",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [
          "aae97abd-d118-4844-a874-56e0396ef98c"
        ],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 718,
        "root": false,
        "rootEmpty": false,
        "_timeout": 100000
      },
      {
        "uuid": "52a7d601-3104-42d7-8d7a-9ab726c4d9c4",
        "title": "Delete Service API ",
        "fullFile": "/Users/nishant/Desktop/DeskTOP/Projects/reflektion_api_automation-master/test/runThis.js",
        "file": "/test/runThis.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [
          {
            "title": "verify the status code is 200 and record has been deleted ",
            "fullTitle": "Delete Service API  verify the status code is 200 and record has been deleted ",
            "timedOut": false,
            "duration": 713,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "logger.info(\"*****DELETE Service API TEST Starts*****\")\nlet uri = \"/posts/1\";\nurl = baseUrl + uri;\nconsole.log(\"Test url is\", url)\nrequest\n    .requestQuery(url, \"DELETE\", headers, function (err, resp) {\n        if (err) {\n            logger.error(\"Error in DELETE Service API\", err)\n            done();\n        } else {\n            console.log(\"status code error for deleted data is \", resp.body, resp.statusCode)\n            logger.info(\"resonse in delete api is\", JSON.stringify(resp.body))\n            expect(resp.statusCode).to.equal(200)\n            logger.info(\"*****DELETE Service API TEST ENDS*****\")\n           \n            done();\n        }\n    })",
            "err": {},
            "isRoot": false,
            "uuid": "7738447d-6452-4909-89a7-deb89d84a7f2",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [
          "7738447d-6452-4909-89a7-deb89d84a7f2"
        ],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 713,
        "root": false,
        "rootEmpty": false,
        "_timeout": 100000
      }
    ],
    "passes": [],
    "failures": [],
    "pending": [],
    "skipped": [],
    "duration": 0,
    "root": true,
    "rootEmpty": true,
    "_timeout": 100000
  },
  "copyrightYear": 2019
}